///////////////////////////////////////////////////////////////////////////////
/// \author (c) Marco Paland (info@paland.com)
///             2011-2013, PALANDesign Hannover, Germany
///
/// \license LGPLv3
/// This file is part of the decom library.
/// decom is free software: you can redistribute it and/or modify
/// it under the terms of the GNU Lesser Public License as published by
/// the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
/// decom is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
/// GNU Lesser Public License for more details.
/// You should have received a copy of the GNU Lesser Public License
/// along with decom. If not, see <http://www.gnu.org/licenses/>.
///
///
/// \brief configuration
///
/// Setup configuration parameter
/// This file CAN/MUST be touched by YOU to setup/define your environment
/// RENAME this file to 'decom_cfg.h' then. When you update this lib, decom_cfg.h
/// is not overwritten, BUT check it against 'decom_cfg.h.dist' for necessary changes!
///
///////////////////////////////////////////////////////////////////////////////

#ifndef _DECOM_CFG_H_
#define _DECOM_CFG_H_


//////////////////////////////////////////////////////////////////////////
// S T A T I S T I C S

// define this to turn on layer statistics (mostly for debugging purpose)
#define DECOM_STATS

// disable for MS release
#if defined(_MSC_VER) && !defined(_DEBUG)
  #undef DECOM_STATS
#endif


//////////////////////////////////////////////////////////////////////////
// L O G G I N G

// logging level
// available levels are NONE, DEBUG, INFO, NOTICE, WARN, ERROR, CRIT, ALERT, EMERG
// NONE or undefined DECOM_LOG_LEVEL will disable logging
// messages below the defined logging level are suppressed
#define DECOM_LOG_LEVEL   DECOM_LOG_LEVEL_DEBUG

// disable for MS release
#if defined(_MSC_VER) && !defined(_DEBUG)
  #undef DECOM_LOG_LEVEL
#endif


//////////////////////////////////////////////////////////////////////////
// V E R S I O N

// decom version information
#include "decom_version.h"


//////////////////////////////////////////////////////////////////////////
// B Y T E   O R D E R

// define byte order here
// possible values __ORDER_LITTLE_ENDIAN__, __ORDER_BIG_ENDIAN__ or __ORDER_PDP_ENDIAN__
#define __BYTE_ORDER__  __ORDER_LITTLE_ENDIAN__

// Ms uses little endian
#if defined(_MSC_VER)
  #undef __BYTE_ORDER__
  #define __BYTE_ORDER__  __ORDER_LITTLE_ENDIAN__
#endif

// check
#ifndef __BYTE_ORDER__ 
  #error System byte order is not defined
#elif __BYTE_ORDER__ !=  __ORDER_BIG_ENDIAN__ && __BYTE_ORDER__ !=  __ORDER_LITTLE_ENDIAN__ && __BYTE_ORDER__ != __ORDER_PDP_ENDIAN__
  #error Unknown byte order useed
#endif


//////////////////////////////////////////////////////////////////////////
// P L A T F O R M   D E F I N I T I O N S

// undefine macros which are defined by some platform headers (e.g. Windows.h) to
// avoid obvious conflicts like with std::min(), std::max() etc.
#undef min
#undef max

// define _WINSOCKAPI_ to stop windows.h including old winsock.h
#define _WINSOCKAPI_


//////////////////////////////////////////////////////////////////////////
// S T D   T Y P E S

// include <cstdint> here as fist choice - if available
#include <cstdint>

// include this if stdint.h or <cstdint> are not available
// or include platform/compiler dependent type definitions here
//#include "util/pstdint.h"
//#include "util/cstdint"


//////////////////////////////////////////////////////////////////////////
// S T L   S U P P O R T

// namespace
// if standard STL is available, use 'std
// if use use embedded STLs set their namespace here, like 'ustl'
namespace stl = std;


//////////////////////////////////////////////////////////////////////////
// C + + 1 1   S U P P O R T

// include this for nullptr support (if unsupported by compiler)
#include "util/CPP11/nullptr.h"

// include platform independent headers HERE
#include <array>
#include <ratio>
#include <chrono>
// include this, if <array>, <ratio> and <chrono> is not available, say no C++11 support
//#include "util/CPP11/array"
//#include "util/CPP11/ratio"
//#include "util/CPP11/chrono"

// include all platform dependent headers for C++11 support HERE
#include <mutex>
#include <thread>
#include <condition_variable>
// include this, if <mutex>, <thread> and <condition_variable> is not available, say no or only partly C++11 support
//#include "util/CPP11/windows/mutex"
//#include "util/CPP11/windows/thread"
//#include "util/CPP11/windows/condition_variable"


//////////////////////////////////////////////////////////////////////////
// C O M M O N   U T I L S

// path to common utils
#include "util/util.h"
#include "util/event.h"
#include "util/log.h"


//////////////////////////////////////////////////////////////////////////
// P L A T F O R M   U T I L S

// path to platform specific headers (e.g. timer implementation)
// Windows platform
#include "util/windows/timer.h"

// Linux platform
// #include "util/linux/timer.h"


#endif // _DECOM_CFG_H_
